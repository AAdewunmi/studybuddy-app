name: CI (Build & Test)

# When to run this workflow
on:
  push:
    branches: [ "main", "develop", "feature/**" ]   # adjust to your flow
  pull_request:
    branches: [ "main", "develop" ]

# Cancel older runs for the same branch/PR to save minutes
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-test:
    name: Build & Test (JDK 17)
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      # 1) Check out repository code
      - name: Checkout
        uses: actions/checkout@v4

      # 2) Set up Java (Temurin) and enable built-in Maven cache
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"          # or "21"
          cache: maven                # caches ~/.m2 automatically

      # (Optional) Show versions in logs for easier debugging
      - name: Show tool versions
        run: |
          java -version
          ./mvnw -v

      # 3) Build (compile + package) without running tests
      - name: Build (skip tests)
        run: ./mvnw -B -DskipTests package

      # 4) Run unit/integration tests
      - name: Test
        run: ./mvnw -B test

      # 5) Always upload test reports to help debug failures
      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: surefire-reports
          path: |
            **/target/surefire-reports/**
            **/target/failsafe-reports/**

# --- OPTIONAL EXTRAS ---

# Example: run the same job on multiple JDKs
# strategy:
#   matrix:
#     java: [ "17", "21" ]
# ... then use java-version: ${{ matrix.java }}

# Example: if tests require a PostgreSQL service
# services:
#   postgres:
#     image: postgres:15
#     env:
#       POSTGRES_DB: studybuddy
#       POSTGRES_USER: sb_user
#       POSTGRES_PASSWORD: sb_pass
#     ports: [ "5432:5432" ]
#     options: >-
#       --health-cmd="pg_isready -U sb_user -d studybuddy"
#       --health-interval=10s --health-timeout=5s --health-retries=5
# Then point your Spring test profile to that DB or use Testcontainers.
